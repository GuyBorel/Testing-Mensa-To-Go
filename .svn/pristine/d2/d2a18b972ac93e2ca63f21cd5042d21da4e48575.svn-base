package de.uniwue.jpp.testing;

import de.uniwue.jpp.testing.interfaces.DayManager;
import de.uniwue.jpp.testing.interfaces.Order;
import de.uniwue.jpp.testing.util.AbstractTestClass;
import de.uniwue.jpp.testing.util.DataGenerator;
import de.uniwue.jpp.testing.util.TestUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.Collection;
import java.util.Optional;

public class TestSimpleDayManager extends AbstractTestClass<DayManager> {

    @Test
    public void testConstructorValidArguments(){

        LocalDate date1 = LocalDate.of(2022,10,4);
        LocalDate date2 = LocalDate.of(2022,3,16);
        LocalDate date3 = LocalDate.of(2022,4,16);
        LocalDate date4 = LocalDate.of(2022,5,16);
        LocalDate date5 = LocalDate.of(2022,6,16);
        DayManager dayManager;
        try {
            construct(date1,3,4);
            construct(date2,4,5);
            construct(date3,5,6);
            construct(date4,6,7);
            construct(date5,7,8);

        }catch (Exception error){
            Assertions.fail("Testing valid arguments for DayManager constructor");
        }

    }

    @Test
    public void testConstructorInvalidArguments(){
        LocalDate date2 = LocalDate.of(2022,3,16);
        LocalDate date1 = LocalDate.of(2020,4,9);
       /* DayManager dayManager1 = construct(null, 3, 4);
        DayManager dayManager2 = construct(LocalDate.of(2022,2,3),4,5);
        DayManager dayManager3 = construct(LocalDate.of(2022,3,4),5,6);
        DayManager dayManager4 = construct(LocalDate.of(2022,4,5),6,7);
        DayManager dayManager5 = construct(LocalDate.of(2022,5,6),7,8);*/

        TestUtils.assertThrowsWithMessage(IllegalArgumentException.class, () -> construct(null, 2,4),"Date must not be null!", "Testing invalid date argument for DayManager constructor");
        TestUtils.assertThrowsWithMessage(IllegalArgumentException.class, () -> construct(date2, 0,4),"NumberOfTimeSlots must not be zero or negative!", "Testing invalid numberOfTimeSlots argument for DayManager constructor");
        TestUtils.assertThrowsWithMessage(IllegalArgumentException.class, () -> construct(date2, -1,4),"NumberOfTimeSlots must not be zero or negative!", "Testing invalid numberOfTimeSlots argument for DayManager constructor");
        TestUtils.assertThrowsWithMessage(IllegalArgumentException.class, () -> construct(date2, 2,0),"CapacityPerSlot must not be zero or negative!", "Testing invalid capacityPerSlot argument for DayManager constructor");
        TestUtils.assertThrowsWithMessage(IllegalArgumentException.class, () -> construct(date2, 2,-1),"CapacityPerSlot must not be zero or negative!", "Testing invalid capacityPerSlot argument for DayManager constructor");
        TestUtils.assertThrowsWithMessage(IllegalArgumentException.class, () -> construct(date1, 2,4),"Date must not be before current date!", "Testing invalid date argument for DayManager constructor");


    }

    @Test
    public void testAddOrderInvalidArguments(){

        DayManager dayManager = construct(LocalDate.of(2022,1,2), 3, 4);

        Order order = DataGenerator.createOrderMock(-1);
        Order goodOrder = DataGenerator.createOrderMock(1);

        TestUtils.assertThrowsWithMessage(IllegalArgumentException.class, () -> dayManager.addOrder(order, 1),"Order must not be null!","Testing invalid order argument for addOrder()");
        TestUtils.assertThrowsWithMessage(IllegalArgumentException.class, () -> dayManager.addOrder(goodOrder, -1),"Illegal slot index!","Testing invalid slot argument for addOrder()");
        TestUtils.assertThrowsWithMessage(IllegalArgumentException.class, () -> dayManager.addOrder(order),"Order must not be null!","Testing invalid order argument for addOrder()");

    }

    @Test
    public void testAddOrderWithSlotArgument(){
        DayManager dayManager = construct(LocalDate.of(2022,1,2), 3, 4);

        Order order = DataGenerator.createOrderMock(1);

        Assertions.assertEquals(0, dayManager.getAllOrders().size());

        Optional <Integer> pref = dayManager.addOrder(order, 1);

        Assertions.assertTrue(pref.isPresent());
        Assertions.assertEquals(1, pref.get());
        Assertions.assertEquals(1, dayManager.getAllOrders().size());

    }

    @Test
    public void testAddOrderWithoutSlotArgument(){
        DayManager dayManager =  construct(LocalDate.of(2022,1,2), 3, 4);

        Order order = DataGenerator.createOrderMock(1);

        Assertions.assertEquals(0, dayManager.getAllOrders().size());

        Optional <Integer> pref = dayManager.addOrder(order);

        Assertions.assertTrue(pref.isPresent());
        Assertions.assertEquals(0, pref.get());
        Assertions.assertEquals(1, dayManager.getAllOrders().size());
    }

    @Test
    public void testGetOrdersForSlot(){
        DayManager dayManager = construct(LocalDate.of(2022,1,2), 3, 4);

        Order order = DataGenerator.createOrderMock(1);

        Optional <Integer> pref = dayManager.addOrder(order, 1);

        Assertions.assertTrue(pref.isPresent());
        Collection <Order> orders = dayManager.getOrdersForSlot(pref.get());
        Assertions.assertEquals(1, orders.size());
        Assertions.assertTrue(orders.contains(order));
    }

    @Test
    public void testGetAllOrders(){
        DayManager dayManager =  construct(LocalDate.of(2022,1,2), 3, 4);

        Order order1 = DataGenerator.createOrderMock(1);
        Order order2 = DataGenerator.createOrderMock(2);
        Order order3 = DataGenerator.createOrderMock(3);

        Assertions.assertEquals(0, dayManager.getAllOrders().size());

        dayManager.addOrder(order1);
        dayManager.addOrder(order2);
        dayManager.addOrder(order3);

        Collection <Order> orders = dayManager.getAllOrders();
        Assertions.assertEquals(3, orders.size());
        Assertions.assertTrue(orders.contains(order1));
        Assertions.assertTrue(orders.contains(order2));
        Assertions.assertTrue(orders.contains(order3));
    }

    @Test
    public void testCalculateEarnings(){
        DayManager dayManager = construct(LocalDate.of(2022,1,2), 3, 4);

        Order order1 = DataGenerator.createOrderMock(1);
        Order order2 = DataGenerator.createOrderMock(2);
        Order order3 = DataGenerator.createOrderMock(3);
        Order order4 = DataGenerator.createOrderMock(4);
        Order order5 = DataGenerator.createOrderMock(5);

        Assertions.assertEquals(0.0, dayManager.calculateEarnings());

        dayManager.addOrder(order1);
        dayManager.addOrder(order2);
        dayManager.addOrder(order3);
        dayManager.addOrder(order4);
        dayManager.addOrder(order5);

        Assertions.assertEquals(17.5, dayManager.calculateEarnings());
    }

    @Test
    public void testToString(){


        DayManager dayManager1 = construct(LocalDate.of(2022,1,2), 3, 4);
        DayManager dayManager2 = construct(LocalDate.of(2022,2,3),4,5);
        DayManager dayManager3 = construct(LocalDate.of(2022,3,4),5,6);
        DayManager dayManager4 = construct(LocalDate.of(2022,4,5),6,7);
        DayManager dayManager5 = construct(LocalDate.of(2022,5,6),7,8);


        Assertions.assertEquals("SimpleDayManager (02.01.22)", dayManager1.toString() , "Incorrect string representation returned by toString()");
        Assertions.assertEquals("SimpleDayManager (03.02.22)", dayManager2.toString() , "Incorrect string representation returned by toString()");
        Assertions.assertEquals("SimpleDayManager (04.03.22)", dayManager3.toString() , "Incorrect string representation returned by toString()");
        Assertions.assertEquals("SimpleDayManager (05.04.22)", dayManager4.toString() , "Incorrect string representation returned by toString()");
        Assertions.assertEquals("SimpleDayManager (06.05.22)", dayManager5.toString() , "Incorrect string representation returned by toString()");
    }
}
